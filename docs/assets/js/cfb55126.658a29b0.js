"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2724],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),s=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(a),m=n,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return a?r.createElement(g,l(l({ref:t},p),{},{components:a})):r.createElement(g,l({ref:t},p))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:n,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},50040:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=a(83117),n=(a(67294),a(3905));const o={title:"\u542f\u7528Kubectl logs/exec/attach\u7b49\u80fd\u529b",sidebar_position:3},l=void 0,i={unversionedId:"advanced/debug",id:"advanced/debug",title:"\u542f\u7528Kubectl logs/exec/attach\u7b49\u80fd\u529b",description:"Prepare certs",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/advanced/debug.md",sourceDirName:"advanced",slug:"/advanced/debug",permalink:"/gameone/docs/advanced/debug",draft:!1,editUrl:"https://github.com/kubeedge/website/blob/master/docs/advanced/debug.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"\u542f\u7528Kubectl logs/exec/attach\u7b49\u80fd\u529b",sidebar_position:3},sidebar:"documentationSideBar",previous:{title:"\u4f7f\u7528CSI\u96c6\u6210\u7b2c\u4e09\u65b9\u5b58\u50a8",permalink:"/gameone/docs/advanced/storage"},next:{title:"\u83b7\u53d6\u8fb9\u7f18\u76d1\u63a7",permalink:"/gameone/docs/advanced/metrics"}},c={},s=[{value:"Prepare certs",id:"prepare-certs",level:2},{value:"Set Iptables Rule",id:"set-iptables-rule",level:2},{value:"Update Configurations",id:"update-configurations",level:2},{value:"Restart",id:"restart",level:2}],p={toc:s},d="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"prepare-certs"},"Prepare certs"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Make sure you can find the kubernetes ",(0,n.kt)("inlineCode",{parentName:"p"},"ca.crt")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"ca.key")," files. If you set up your kubernetes cluster by ",(0,n.kt)("inlineCode",{parentName:"p"},"kubeadm")," , those files will be in ",(0,n.kt)("inlineCode",{parentName:"p"},"/etc/kubernetes/pki/")," dir."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"ls /etc/kubernetes/pki/\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Set ",(0,n.kt)("inlineCode",{parentName:"p"},"CLOUDCOREIPS")," env. The environment variable is set to specify the IP address of cloudcore, or a VIP if you have a highly available cluster."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'export CLOUDCOREIPS="192.168.0.139"\n')),(0,n.kt)("p",{parentName:"li"},"(Warning: the same ",(0,n.kt)("strong",{parentName:"p"},"terminal")," is essential to continue the work, or it is necessary to type this command again.) Checking the environment variable with the following command:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"echo $CLOUDCOREIPS\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Generate the certificates for ",(0,n.kt)("strong",{parentName:"p"},"CloudStream")," on cloud node, however, the generation file is not in the ",(0,n.kt)("inlineCode",{parentName:"p"},"/etc/kubeedge/"),", we need to copy it from the repository which was git cloned from GitHub.\nChange user to root:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"sudo su\n")),(0,n.kt)("p",{parentName:"li"}," Copy certificates generation file from original cloned repository:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"cp $GOPATH/src/github.com/kubeedge/kubeedge/build/tools/certgen.sh /etc/kubeedge/\n")),(0,n.kt)("p",{parentName:"li"}," Change directory to the kubeedge directory:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"cd /etc/kubeedge/\n")),(0,n.kt)("p",{parentName:"li"}," Generate certificates from ",(0,n.kt)("strong",{parentName:"p"},"certgen.sh")),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"/etc/kubeedge/certgen.sh stream\n")))),(0,n.kt)("h2",{id:"set-iptables-rule"},"Set Iptables Rule"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Set iptables on the host. This command should be executed on every node which deployed apiserver.(In this case, it is the master node, and execute this command by root.)"),(0,n.kt)("p",{parentName:"li"},"Run the following command on the host on which each apiserver runs:"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Note:")," You need to set the cloudcoreips variable first"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"iptables -t nat -A OUTPUT -p tcp --dport 10350 -j DNAT --to $CLOUDCOREIPS:10003\n")),(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"Port 10003 and 10350 are the default ports for the CloudStream and edgecore,\nuse your own ports if you have changed them.")),(0,n.kt)("p",{parentName:"li"},"If you are not sure whether you have a setting of iptables, and you want to clean all of them.\n(If you set up iptables wrongly, it will block you out of this feature)"),(0,n.kt)("p",{parentName:"li"},"The following command can be used to clean up iptables:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X\n")))),(0,n.kt)("h2",{id:"update-configurations"},"Update Configurations"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Modify ",(0,n.kt)("strong",{parentName:"p"},"both")," ",(0,n.kt)("inlineCode",{parentName:"p"},"/etc/kubeedge/config/cloudcore.yaml")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"/etc/kubeedge/config/edgecore.yaml")," on cloudcore and edgecore. Set up ",(0,n.kt)("strong",{parentName:"p"},"cloudStream")," and ",(0,n.kt)("strong",{parentName:"p"},"edgeStream")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"enable: true"),". Change the server IP to the cloudcore IP (the same as $CLOUDCOREIPS)."),(0,n.kt)("p",{parentName:"li"},"Modify ",(0,n.kt)("inlineCode",{parentName:"p"},"/etc/kubeedge/config/cloudcore.yaml"),":"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"cloudStream:\n  enable: true\n  streamPort: 10003\n  tlsStreamCAFile: /etc/kubeedge/ca/streamCA.crt\n  tlsStreamCertFile: /etc/kubeedge/certs/stream.crt\n  tlsStreamPrivateKeyFile: /etc/kubeedge/certs/stream.key\n  tlsTunnelCAFile: /etc/kubeedge/ca/rootCA.crt\n  tlsTunnelCertFile: /etc/kubeedge/certs/server.crt\n  tlsTunnelPrivateKeyFile: /etc/kubeedge/certs/server.key\n  tunnelPort: 10004\n")),(0,n.kt)("p",{parentName:"li"},"Modify ",(0,n.kt)("inlineCode",{parentName:"p"},"/etc/kubeedge/config/edgecore.yaml"),":"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"edgeStream:\n  enable: true\n  handshakeTimeout: 30\n  readDeadline: 15\n  server: 192.168.0.139:10004\n  tlsTunnelCAFile: /etc/kubeedge/ca/rootCA.crt\n  tlsTunnelCertFile: /etc/kubeedge/certs/server.crt\n  tlsTunnelPrivateKeyFile: /etc/kubeedge/certs/server.key\n  writeDeadline: 15\n")))),(0,n.kt)("h2",{id:"restart"},"Restart"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Restart all the cloudcore and edgecore."),(0,n.kt)("p",{parentName:"li"},"At the cloud side:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"sudo systemctl restart cloudcore.service\n")),(0,n.kt)("p",{parentName:"li"},"At the edge side:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"sudo systemctl restart edgecore.service\n")))))}u.isMDXComponent=!0}}]);