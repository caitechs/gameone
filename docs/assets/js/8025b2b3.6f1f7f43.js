"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6167],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>v});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),l=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=l(e.components);return a.createElement(d.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=l(n),u=i,v=p["".concat(d,".").concat(u)]||p[u]||m[u]||o;return n?a.createElement(v,r(r({ref:t},s),{},{components:n})):a.createElement(v,r({ref:t},s))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c[p]="string"==typeof e?e:i,r[1]=c;for(var l=2;l<o;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},14441:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=n(83117),i=(n(67294),n(3905));const o={title:"\u8bbe\u5907\u7ba1\u7406",sidebar_position:2},r=void 0,c={unversionedId:"developer/device_crd",id:"developer/device_crd",title:"\u8bbe\u5907\u7ba1\u7406",description:"KubeEdge supports device management with the help of Kubernetes CRDs and a Device Mapper (explained below) corresponding to the device being used.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/developer/device_crd.md",sourceDirName:"developer",slug:"/developer/device_crd",permalink:"/gameone/docs/developer/device_crd",draft:!1,editUrl:"https://github.com/kubeedge/website/blob/master/docs/developer/device_crd.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"\u8bbe\u5907\u7ba1\u7406",sidebar_position:2},sidebar:"documentationSideBar",previous:{title:"\u7f16\u8bd1\u6784\u5efa",permalink:"/gameone/docs/developer/build"},next:{title:"Tests",permalink:"/gameone/docs/category/tests"}},d={},l=[{value:"Notice",id:"notice",level:2},{value:"Device Model",id:"device-model",level:2},{value:"Device Model Sample",id:"device-model-sample",level:3},{value:"Device Instance",id:"device-instance",level:2},{value:"Device Instance Sample",id:"device-instance-sample",level:3},{value:"Customized Protocols and Customized Settings",id:"customized-protocols-and-customized-settings",level:3},{value:"Data Topic",id:"data-topic",level:3},{value:"Device Mapper",id:"device-mapper",level:2},{value:"Usage of Device CRD",id:"usage-of-device-crd",level:2}],s={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"KubeEdge supports device management with the help of Kubernetes ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#customresourcedefinitions"},"CRDs")," and a Device Mapper (explained below) corresponding to the device being used.\nWe currently manage devices from the cloud and synchronize the device updates between edge nodes and cloud, with the help of device controller and device twin modules."),(0,i.kt)("h2",{id:"notice"},"Notice"),(0,i.kt)("p",null,"Device Management features are updated from v1alpha1 to v1alpha2 in release v1.4.\nIt is ",(0,i.kt)("strong",{parentName:"p"},"not")," compatible with v1alpha1 and v1alpha2.\nDetails can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kubeedge/kubeedge/tree/master/docs/proposals/device-management-enhance.md"},"device-management-enhance")),(0,i.kt)("h2",{id:"device-model"},"Device Model"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"device model")," describes the device properties such as 'temperature' or 'pressure'. A device model is like a reusable template using which many devices can be created and managed.\nDetails on the device model definition can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kubeedge/kubeedge/tree/master/docs/proposals/device-management-enhance.md#modifications-on-device-model-types"},"here"),"."),(0,i.kt)("h3",{id:"device-model-sample"},"Device Model Sample"),(0,i.kt)("p",null,"A sample device model like below,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: devices.kubeedge.io/v1alpha2\nkind: DeviceModel\nmetadata:\n name: sensor-tag-model\n namespace: default\nspec:\n properties:\n  - name: temperature\n    description: temperature in degree celsius\n    type:\n     int:\n      accessMode: ReadWrite\n      maximum: 100\n      unit: degree celsius\n  - name: temperature-enable\n    description: enable data collection of temperature sensor\n    type:\n      string:\n        accessMode: ReadWrite\n        defaultValue: 'OFF'\n")),(0,i.kt)("h2",{id:"device-instance"},"Device Instance"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"device")," instance represents an actual device object. It is like an instantiation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"device model")," and references properties defined in the model which are exposed by property visitors to access. The device spec is static while the device status contains dynamically changing data like the desired state of a device property and the state reported by the device.\nDetails on the device instance definition can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kubeedge/kubeedge/tree/master/docs/proposals/device-management-enhance.md#modifications-on-device-instance-types"},"here"),"."),(0,i.kt)("h3",{id:"device-instance-sample"},"Device Instance Sample"),(0,i.kt)("p",null,"A sample device instance like below,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: devices.kubeedge.io/v1alpha2\nkind: Device\nmetadata:\n  name: sensor-tag-instance-01\n  labels:\n    description: TISimplelinkSensorTag\n    manufacturer: TexasInstruments\n    model: CC2650\nspec:\n  deviceModelRef:\n    name: sensor-tag-model\n  protocol:\n    modbus:\n      slaveID: 1\n    common:\n      com:\n        serialPort: '1'\n        baudRate: 115200\n        dataBits: 8\n        parity: even\n        stopBits: 1\n  nodeSelector:\n    nodeSelectorTerms:\n    - matchExpressions:\n      - key: ''\n        operator: In\n        values:\n        - node1\n  propertyVisitors:\n    - propertyName: temperature\n      modbus:\n        register: CoilRegister\n        offset: 2\n        limit: 1\n        scale: 1\n        isSwap: true\n        isRegisterSwap: true\n    - propertyName: temperature-enable\n      modbus:\n        register: DiscreteInputRegister\n        offset: 3\n        limit: 1\n        scale: 1.0\n        isSwap: true\n        isRegisterSwap: true\nstatus:\n  twins:\n    - propertyName: temperature\n      reported:\n        metadata:\n          timestamp: '1550049403598'\n          type: int\n        value: '10'\n      desired:\n        metadata:\n          timestamp: '1550049403598'\n          type: int\n        value: '15'\n")),(0,i.kt)("h3",{id:"customized-protocols-and-customized-settings"},"Customized Protocols and Customized Settings"),(0,i.kt)("p",null,"From KubeEdge v1.4, we can support customized protocols and customized settings, samples like below"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"customized protocols")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"  propertyVisitors:\n    - propertyName: temperature\n      collectCycle: 500000000\n      reportCycle: 1000000000\n      customizedProtocol:\n        protocolName: MY-TEST-PROTOCOL\n        configData:\n          def1: def1-val\n          def2: def2-val\n          def3:\n            innerDef1: idef-val\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"customized values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"  protocol:\n    common:\n      ...\n      customizedValues:\n        def1: def1-val\n        def2: def2-val\n")),(0,i.kt)("h3",{id:"data-topic"},"Data Topic"),(0,i.kt)("p",null,"From KubeEdge v1.4, we add a data section defined in the device spec.\nThe data section describes a list of time-series properties that will be reported by mappers to the edge MQTT broker and should be processed in the edge."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: devices.kubeedge.io/v1alpha1\nkind: Device\nmetadata:\n    ...\nspec:\n  deviceModelRef:\n    ...\n  protocol:\n    ...\n  nodeSelector:\n    ...\n  propertyVisitors:\n    ...\n  data:\n    dataTopic: "$ke/events/device/+/data/update"\n    dataProperties:\n      - propertyName: pressure\n        metadata:\n          type: int\n      - propertyName: temperature\n        metadata:\n          type: int\n')),(0,i.kt)("h2",{id:"device-mapper"},"Device Mapper"),(0,i.kt)("p",null," Mapper is an application that is used to connect and control devices. The following are the responsibilities of the mapper:\n1) Scan and connect to the device.\n2) Report the actual state of twin-attributes of device.\n3) Map the expected state of device-twin to the actual state of device-twin.\n4) Collect telemetry data from the device.\n5) Convert readings from the device to a format accepted by KubeEdge.\n6) Schedule actions on the device.\nCheck the health of the device.\nThe mapper can be specific to a protocol where standards are defined i.e Bluetooth, Zigbee, etc or specific to a device if it is a custom protocol."),(0,i.kt)("p",null," Mapper design details can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kubeedge/kubeedge/tree/master/docs/proposals/mapper-design.md#mapper-design"},"here")),(0,i.kt)("p",null," An example of a mapper application created to support bluetooth protocol can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kubeedge/mappers-go/tree/main/mappers/ble"},"here")),(0,i.kt)("h2",{id:"usage-of-device-crd"},"Usage of Device CRD"),(0,i.kt)("p",null,"The following are the steps to"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a device model in the cloud node."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"        kubectl apply -f <path to device model yaml>\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a device instance in the cloud node."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"       kubectl apply -f <path to device instance yaml>\n")))),(0,i.kt)("p",null,"Note: The creation of a device instance will also lead to the creation of a config map which will contain information about the devices which are required by the mapper applications\nThe name of the config map will be as follows: device-profile-config-< edge node name >. The updates of the config map are handled internally by the device controller."),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run the mapper application corresponding to your protocol.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Edit the status section of the device instance yaml created in step 2 and apply the yaml to change the state of device twin. This change will be reflected at the edge, through the device controller\nand device twin modules. Based on the updated value of device twin at the edge the mapper will be able to perform its operation on the device.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The reported values of the device twin are updated by the mapper application at the edge and this data is synced back to the cloud by the device controller. Users can view the update on the cloud by checking their device instance object."))),(0,i.kt)("p",null,"Note: Sample device models and device instances for a few protocols can be found at "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$GOPATH/src/github.com/kubeedge/kubeedge/build/crd-samples/devices\n")))}m.isMDXComponent=!0}}]);