"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5704],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(h,l(l({ref:t},u),{},{components:n})):r.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},71968:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(83117),o=(n(67294),n(3905));const a={title:"\u90e8\u7f72\u9ad8\u53ef\u7528\u7684CloudCore",sidebar_position:6},l=void 0,i={unversionedId:"setup/deploy-ha",id:"setup/deploy-ha",title:"\u90e8\u7f72\u9ad8\u53ef\u7528\u7684CloudCore",description:"The HA of CloudCore(deployed in k8s cluster)",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/setup/deploy-ha.md",sourceDirName:"setup",slug:"/setup/deploy-ha",permalink:"/gameone/docs/setup/deploy-ha",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"\u90e8\u7f72\u9ad8\u53ef\u7528\u7684CloudCore",sidebar_position:6},sidebar:"documentationSideBar",previous:{title:"\u79bb\u7ebf\u90e8\u7f72",permalink:"/gameone/docs/setup/install-offline"},next:{title:"\u914d\u7f6eCloudCore\u548cEdgeCore",permalink:"/gameone/docs/setup/config"}},s={},c=[{value:"The HA of CloudCore(deployed in k8s cluster)",id:"the-ha-of-cloudcoredeployed-in-k8s-cluster",level:2},{value:"Determine the virtual IP of CloudCore",id:"determine-the-virtual-ip-of-cloudcore",level:2},{value:"Create k8s resources",id:"create-k8s-resources",level:2},{value:"02-ha-configmap.yaml",id:"02-ha-configmapyaml",level:3},{value:"keepalived",id:"keepalived",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"the-ha-of-cloudcoredeployed-in-k8s-cluster"},"The HA of CloudCore(deployed in k8s cluster)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:"),"\nThere are several ways to achieve the HA of cloudcore, for example, ingress, keepalived etc. Here we adopt the keepalived. The HA of cloudcore according to ingress will be achieved later."),(0,o.kt)("h2",{id:"determine-the-virtual-ip-of-cloudcore"},"Determine the virtual IP of CloudCore"),(0,o.kt)("p",null,"Determine a VIP that the CloudCore service exposed to the edge nodes. Here we recommend ",(0,o.kt)("inlineCode",{parentName:"p"},"keepalived")," to do that. You had better directly schedule pods to specific number of nodes by ",(0,o.kt)("inlineCode",{parentName:"p"},"nodeSelector")," when using  ",(0,o.kt)("inlineCode",{parentName:"p"},"keepalived"),". And you have  to install ",(0,o.kt)("inlineCode",{parentName:"p"},"keepalived")," in each of nodes where CloudCore runs. The configuration of ",(0,o.kt)("inlineCode",{parentName:"p"},"keepalived")," is shown in the end. Here suppose the VIP is 10.10.102.242."),(0,o.kt)("p",null,"The use of ",(0,o.kt)("inlineCode",{parentName:"p"},"nodeSelector")," is as follow:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl label nodes [nodename] [key]=[value]  # label the nodes where the cloudcore will run\n")),(0,o.kt)("p",null,"modify the term of ",(0,o.kt)("inlineCode",{parentName:"p"},"nodeselector"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: cloudcore\nspec:\n  template:\n    spec:\n      nodeSelector: # configure the nodeSelector here!\n        [key]: [value]\n")),(0,o.kt)("h2",{id:"create-k8s-resources"},"Create k8s resources"),(0,o.kt)("p",null,"The manifests and scripts in ",(0,o.kt)("inlineCode",{parentName:"p"},"github.com/kubeedge/kubeedge/build/cloud/ha")," will be used, so place these files to somewhere you can kubectl with (You have to make some modifications to manifests/scrips to suit your environment.)"),(0,o.kt)("p",null,"First, ensure your k8s cluster can pull cloudcore image. If the image not exist. We can make one, and push to your registry."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd $GOPATH/src/github.com/kubeedge/kubeedge\nmake image WHAT=cloudcore\n")),(0,o.kt)("p",null,"We create k8s resources from the manifests in name order. Before creating, ",(0,o.kt)("strong",{parentName:"p"},"check the content of each manifest to make sure it meets your environment.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," Now the follow manifests don't support ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl logs")," command yet. If need, you have to make more configuration manually."),(0,o.kt)("h3",{id:"02-ha-configmapyaml"},"02-ha-configmap.yaml"),(0,o.kt)("p",null,"Configure the VIP address of CloudCore which is exposed to the edge nodes in the ",(0,o.kt)("inlineCode",{parentName:"p"},"advertiseAddress"),", which will be added to SANs in cert of CloudCore. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"modules:\n  cloudHub:\n    advertiseAddress:\n    - 10.10.102.242\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," If you want to reset the CloudCore, run this before creating k8s resources:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete namespace kubeedge\n")),(0,o.kt)("p",null,"Then create k8s resources:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cd build/cloud/ha\nfor resource in $(ls *.yaml); do kubectl create -f $resource; done\n")),(0,o.kt)("h2",{id:"keepalived"},"keepalived"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"keepalived")," configuration we recommend is as following. You can adjust it according to your needs."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"keepalived.conf:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"master:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'! Configuration File for keepalived\n\nglobal_defs {\n  router_id lb01\n  vrrp_mcast_group4 224.0.0.19\n}\n# CloudCore\nvrrp_script CloudCore_check {\n  script "/etc/keepalived/check_cloudcore.sh" # the script for health check\n  interval 2\n  weight 2\n  fall 2\n  rise 2\n}\nvrrp_instance CloudCore {\n  state MASTER\n  interface eth0 # based on your host\n  virtual_router_id 167\n  priority 100\n  advert_int 1\n  authentication {\n    auth_type PASS\n    auth_pass 1111\n  }\n  virtual_ipaddress {\n    10.10.102.242/24 # VIP\n  }\n  track_script {\n    CloudCore_check\n }\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"backup:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'! Configuration File for keepalived\n\nglobal_defs {\n  router_id lb02\n  vrrp_mcast_group4 224.0.0.19\n}\n# CloudCore\nvrrp_script CloudCore_check {\n  script "/etc/keepalived/check_cloudcore.sh" # the script for health check\n  interval 2\n  weight 2\n  fall 2\n  rise 2\n}\nvrrp_instance CloudCore {\n  state BACKUP\n  interface eth0 # based on your host\n  virtual_router_id 167\n  priority 99\n  advert_int 1\n  authentication {\n    auth_type PASS\n    auth_pass 1111\n  }\n  virtual_ipaddress {\n    10.10.102.242/24 # VIP\n  }\n  track_script {\n    CloudCore_check\n }\n}\n')),(0,o.kt)("p",null,"check_cloudcore.sh:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"#!/usr/bin/env bash\nhttp_code=`curl -k -o /dev/null -s -w %{http_code} https://127.0.0.1:10002/readyz`\nif [ $http_code == 200 ]; then\n    exit 0\nelse\n    exit 1\nfi\n\n")))}d.isMDXComponent=!0}}]);